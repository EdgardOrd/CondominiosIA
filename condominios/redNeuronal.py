# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kKoHmQOh9WPeNONYeaWXjDBnpU4FEF__
"""

import tensorflow as tf
import matplotlib.pyplot as plt

#ciudad(solo sps y tegus),
#m^2, 
#nº hab,
#baños, 
#nº planta, 
#ascensor (0-1), 
#exterior (0-1),  
#amueblado (0,1), 
#céntrico (0, 1), 
#area verde (0,1), 
#gimnasio(1,0), 
#cantidad de parqueos, 
#piscina(1,0),
#seguridad(1,0), 
#0 sera Tegus y 1 sera sps
#0 no y 1 si
features = [(0,110,2,3.5,16,1,1,1,1,1,1,2,1,1),
            (0,100,2,3.5,16,0,1,1,1,1,1,2,1,1),
            (0,128,2,3.5,10,1,1,1,1,1,1,2,1,1),
            (0,110,2,3.5,24,1,1,1,1,1,1,2,1,1),
            (0,110,2,3.5,24,1,0,1,1,1,1,2,1,1),
            (0,88,2,3.5,2,1,0,1,1,1,0,2,1,0),
            (0,128,2,2,10,1,1,1,1,1,1,2,1,1),
            (0,118,6,2,10,1,1,1,1,1,1,2,1,0),
            (0,117,2,2,10,1,1,1,0,1,1,1,1,0),
            (0,160,2,4,9,1,1,1,1,1,1,3,1,1),
            (0,200,2,4,30,1,1,1,1,1,1,3,1,1),
            (0,200,2,4,30,0,1,1,1,1,1,3,1,1),
            (0,246,3,5,17,1,1,1,1,0,2,1,1,1),
            (0,110,2,3.5,16,1,0,0,0,1,1,2,1,1),
            (0,118,6,2,10,1,0,0,0,0,0,0,0,0),
            (1,207,3,4,5,1,0,0,1,1,1,2,1,1),
            (1,207,3,4,5,0,0,0,1,1,1,2,1,1),
            (1,207,3,4,5,0,0,0,1,1,1,2,1,0),
            (1,207,3,4,5,1,0,0,1,1,1,2,1,0),
            (1,207,3,4,5,1,0,0,0,1,1,2,1,1),
            (0,110,2,4,10,1,1,0,1,1,1,2,1,1),
            (0,110,2,3.5,10,0,1,0,1,1,1,2,1,1),
            (0,110,2,3.5,10,1,1,1,1,1,1,2,1,1),
            (0,110,2,3.5,10,1,1,0,0,0,0,1,0,1),
            (1,103,3,4,5,1,0,0,1,1,1,2,1,1),
            (0,80,2,3.5,10,1,1,0,1,1,1,2,1,1),
            (0,108,3,2,3,1,1,1,1,1,1,1,1,1),
            (0,200,4,4,10,1,1,1,1,1,1,2,1,1),
            (0,200,4,4,10,1,1,1,1,1,1,2,1,1),
            (0,200,4,4,10,0,1,1,1,1,1,2,1,1),
            (0,200,4,4,10,0,1,1,0,1,1,2,1,1),
            (0,252,2,3,6,1,1,1,1,1,1,2,1,1),
            (0,252,2,1,6,1,1,1,1,1,1,2,1,1),
            (0,252,2,0,6,1,1,1,1,1,1,2,1,1),
            (0,166,3,2.5,2,0,0,1,1,1,1,1,1,1),
            (0,166,3,2.5,2,0,0,1,0,1,1,1,1,1),
            (0,110,2,3.5,24,0,0,1,1,1,1,2,1,1),
            (0,252,2,0,32,0,1,1,1,1,1,2,1,1),
            (0,87,2,0,28,0,0,0,0,0,0,1,0,0),
            (0, 200, 2, 4, 30, 1, 1, 1, 1, 1, 1, 3, 1, 1),
            (0, 110, 2, 3.5, 24, 1, 0, 1, 1, 1, 1, 2, 1, 1),
            (0, 110, 2, 3.5, 16, 0, 1, 1, 1, 1, 1, 2, 1, 1),
             (0, 110, 2, 3.5, 8, 0, 1, 1, 1, 1, 1, 2, 1, 1),
            (0, 110, 2, 3.5, 4, 0, 1, 1, 1, 1, 1, 2, 1, 1)]
targets = [1700,1000,1627,1808,1728,1028,1417,1527,1253,2000,2327,1256,2700,1528,723,1500,1350,1000,1200,1357,1700,1250,2000,1212,863,980,1247,1800,2500,2000,1700,2850,2773,1500,1800,1522
           ,908,678,250,2198,1856,956,920,930]

data = list(zip(features, targets))

# Ordenar los datos por el valor de targets
data.sort(key=lambda x: x[1])

# Imprimir los resultados
for d in data:
    print(d)

capaEntrada = tf.keras.layers.Dense(units=14, input_shape=[14])
capaOculta = tf.keras.layers.Dense(units=14)
capaSalida = tf.keras.layers.Dense(units=1)

modelo = tf.keras.Sequential([capaEntrada, capaOculta, capaSalida])

modelo.compile(
    optimizer = tf.keras.optimizers.Adam(0.1),
    loss = 'mean_squared_error'
)

print('Inicio de entrenamiento...')
historial = modelo.fit(features, targets, epochs=2000, verbose=False)
print('Modelo entrenado!')

plt.xlabel('#Época')
plt.ylabel('Mágnitud de pérdida')
plt.plot(historial.history['loss'])
plt.show()

pip install tensorflowjs

modelo.save('pisos_alquiler.h5')
print("Fin")
!tensorflowjs_converter --input_format keras pisos_alquiler.h5 condominios

!mkdir data_condominios

!tensorflowjs_converter --input_format keras pisos_alquiler.h5 data_condominios

"""# New Section"""